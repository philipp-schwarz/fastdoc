#!/usr/bin/env node

// Name this process for task manager and system
process.bin = process.title = 'fastdoc';

// Load everything we need
const fs = require('fs')

// Files to be processed
let inData = [];

// Save to path or directory
let outPath = '';
let outIsDir = false;

// Table of contents parser
function parseToc(content) {
	
	// List all markdown headlines
	let headList = content.match(/(^|\n)#[^\n]+/g);
	if (!headList)
		headList = [];

	// Make five tocs for different headline depths
	let toc = ['', '', '', '', ''];
	for (let i=0; i<headList.length; i++) {

		// Make a link from depth, label and target
		let str = headList[i].trim();
		let depth = str.match(/^#+/)[0].length;
		let label = str.replace(/^[# ]*/, '').replace(/[\[\]]/g, '');
		let target = str.toLowerCase().replace(/[^a-z0-9 ]/g, '').trim().replace(/\s+/g, '-');
		let link = '    '.repeat(depth-1)+'- ['+label+'](#'+target+')';

		// Add the link to matching tocs
		for (let j=depth-1; j<5; j++) {
			if (toc[j])
				toc[j] += "\n";
			toc[j] += link;
		}
	}

	// Add tocs to the content
	for (let i=0; i<5; i++) {
		content = content.replace('{fastdoc-toc-'+(i+1)+'}', toc[i]);
	}
	content = content.replace('{fastdoc-toc}', toc[4]);

	return content;
}

// Show usage when called without arguments
if (process.argv.length <= 2) {
	console.error('No arguments found.');
	console.error('Usage: https://www.npmjs.com/package/fastdoc');
	process.exit();
}

// Process all cli arguments
for (let i=2; i<process.argv.length; i++) {

	// Current and next argument
	let cur = process.argv[i];
	let next = process.argv[i+1];

	// Parameters and options
	if (cur[0] == '-') {
		
		// Output
		if ((cur == '-o' || cur == '--output') && next) {
			outPath = next;

			if (fs.existsSync(outPath)) {
				outIsDir = fs.lstatSync(outPath).isDirectory();
			}
			i++;
		}
	}

	// Every other parameter is expected to be a file
	else {

		// Path not found
		if (!fs.existsSync(cur)) {
			console.error('File not found: '+cur+"\n");
			process.exit();
		}

		// Read file content
		inData.push({
			path: cur,
			data: fs.readFileSync(cur)+''
		});
	}
}

// Process data
for (let i=0; i<inData.length; i++) {
	let data = inData[i].data;

	// Single Äºine C style
	data = data.replace(/\/\/[ ]?(.*?)[ ]*\/\/doc/g, '{{{DOCSTART}}}$1{{{DOCEND}}}');
	data = data.replace(/\/\/doc\/\/[ ]?(.*)/g, '{{{DOCSTART}}}$1{{{DOCEND}}}');

	// Multiline C style
	data = data.replace(/[ \n]*\/\*([\s\S]*?)\*doc\*\//g, '{{{DOCSTART}}}$1{{{DOCEND}}}');
	data = data.replace(/[ \n]*\/\*doc\*([\s\S]*?)\*\//g, '{{{DOCSTART}}}$1{{{DOCEND}}}');

	// Single line bash style
	data = data.replace(/#[ ]?(.*?)[ ]*#doc/g, '{{{DOCSTART}}}$1{{{DOCEND}}}');
	data = data.replace(/#doc#[ ]?(.*)/g, '{{{DOCSTART}}}$1{{{DOCEND}}}');

	// Mark list
	let list = data.match(/[ \t]*\{\{\{DOCSTART\}\}\}([\s\S]*?)\{\{\{DOCEND\}\}\}/g);
	if (!list)
		list = [];
	for (let j=0; j<list.length; j++) {

		// Current mark
		let mark = list[j];

		// Count leading spaces
		let spaceString = '';
		let match = mark.match(/^[ \t]+/);
		if (match)
			spaceString = match[0];

		// Reindent lines by leading spaces
		mark = mark.split("\n"+spaceString).join("\n");
		if (mark.startsWith(spaceString))
			mark = mark.substr(spaceString.length);

		// Remove doc marker
		mark = mark.replace(/\{\{\{DOC(START|END)\}\}\}/g, '');

		// Manage new lines at beginning and end
		mark = mark.replace(/^([ \t]*\n)*/, '');
		mark = mark.replace(/[ \t\n]*$/, '');
		mark += "\n\n";

		// Save changes to list
		list[j] = mark;
	}

	inData[i].out = list.join('');
}

// Output to stdout
if (!outPath) {
	let content = '';
	for (let i=0; i<inData.length; i++) {
		content += inData[i].out;
	}
	console.log(parseToc(content));
}

// Save files, one per input file
else if (outIsDir) {
	for (let i=0; i<inData.length; i++) {
		let filename = inData[i].path.split('/').pop().replace(/\.[^.]+$/, '')+'.md';
		let path = outPath+'/'+filename;
		console.log(path);
		fs.writeFileSync(path, parseToc(inData[i].out));
	}
}

// Save single file
else {
	let content = '';
	for (let i=0; i<inData.length; i++) {
		content += inData[i].out;
	}
	console.log(outPath);
	fs.writeFileSync(outPath, parseToc(content));
}